/*
 * Copyright (c) 2016-present,
 * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
 *
 * This file is part of Catapult.
 *
 * Catapult is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Catapult is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.
 */

const modelFormatter = require('../../src/model/modelFormatter');
const { expect } = require('chai');

describe('model formatter', () => {
	describe('block', () => {
		const buffers = {
			blockHeader: Buffer.of(
				0xF5, 0x24, 0x8C, 0xB0, 0x05, 0x49, 0xC6, 0x15, 0xFC, 0x56, 0x13, 0x08, 0xE3, 0x4B, 0x60, 0xFF, // signature
				0x3E, 0xE9, 0xFA, 0x15, 0xA3, 0xB6, 0x05, 0xDC, 0x0C, 0x4C, 0xF7, 0xF1, 0xB1, 0x5A, 0xAB, 0xDC,
				0xCC, 0x2E, 0x09, 0x59, 0x38, 0x97, 0xF2, 0x69, 0xD9, 0xE2, 0x56, 0x29, 0x2B, 0xF3, 0x52, 0xC0,
				0xE8, 0x34, 0x62, 0x6D, 0x00, 0x3C, 0xBF, 0xC2, 0x18, 0x0D, 0x71, 0xED, 0x25, 0x72, 0x3F, 0x48,
				0x20, 0x8D, 0xEC, 0x1A, 0x5D, 0xB8, 0x55, 0xFB, 0x7C, 0x3E, 0xA2, 0xC5, 0x11, 0xDD, 0x91, 0xA4, // signer
				0x0A, 0x49, 0xEC, 0x65, 0x42, 0x03, 0x42, 0xD2, 0x98, 0xDF, 0x19, 0xD2, 0x1C, 0xD1, 0xA8, 0x94,
				0xA4, 0xA8, 0x82, 0xEA, // version, type
				0xD7, 0x97, 0x87, 0x45, 0x0E, 0xE1, 0x00, 0x00, // height
				0x37, 0x62, 0x30, 0x3A, 0x46, 0x8B, 0x01, 0x00, // timestamp
				0x0A, 0x60, 0x54, 0x86, 0x02, 0x75, 0x00, 0x00, // difficulty
				0x50, 0x78, 0xE8, 0xA1, 0xE9, 0x35, 0xE3, 0x61, 0xD0, 0x81, 0x2D, 0xF8, 0xC4, 0x49, 0x51, 0xFB, // previous block hash
				0x04, 0x91, 0x31, 0x30, 0x66, 0x3E, 0x14, 0x29, 0x81, 0x78, 0xE3, 0xE0, 0x24, 0xDF, 0x0D, 0xD0,
				0x85, 0x49, 0x6C, 0x45, 0x82, 0x8A, 0x76, 0xAC, 0xD6, 0x58, 0xD8, 0xE3, 0xFB, 0x45, 0x6D, 0x0E, // block transactions hash
				0x2F, 0xD2, 0xC2, 0xDD, 0x97, 0xD8, 0x46, 0xBA, 0x5C, 0x19, 0x2D, 0xEC, 0xC8, 0x53, 0x78, 0x0E
			),
			transaction: Buffer.of(
				0x95, 0x00, 0x00, 0x00, // size
				0xF2, 0xB5, 0xEE, 0xA0, 0x65, 0x6D, 0xE1, 0x9D, 0x26, 0xEA, 0xE5, 0xFC, 0xFE, 0x7A, 0x72, 0x1B, // signature
				0x1B, 0x75, 0xC0, 0xB5, 0x70, 0xAF, 0x6B, 0xCF, 0x92, 0xE0, 0xC0, 0xD4, 0xCE, 0x76, 0xBC, 0xC6,
				0xF2, 0x54, 0x8D, 0x46, 0xBB, 0x6E, 0x43, 0xA3, 0x35, 0xC5, 0xC8, 0x31, 0xB7, 0x53, 0x0A, 0x0E,
				0xFA, 0xB2, 0xF1, 0xB3, 0x19, 0x2A, 0x86, 0xC1, 0x73, 0xB9, 0xBC, 0x54, 0x10, 0x86, 0xD8, 0xE4,
				0xCA, 0xBD, 0xFA, 0x7E, 0x67, 0x3D, 0xF9, 0x6A, 0x1B, 0x17, 0xAF, 0xF3, 0xD9, 0xB8, 0xFF, 0x15, // signer
				0xB4, 0x7C, 0x8B, 0xCB, 0xEC, 0x42, 0x45, 0x44, 0xF8, 0xF6, 0xD3, 0xDF, 0xFE, 0x7D, 0xDC, 0x85,
				0xE6, 0x18, 0x45, 0x58, // version, type
				0xFE, 0x4E, 0x11, 0x3F, 0xB8, 0x44, 0x00, 0x00, // maxFee
				0x9B, 0x13, 0x84, 0x64, 0x4C, 0xC1, 0x02, 0x00, // deadline
				0xB1, 0x12, 0x41, 0x06, 0xFE, 0xB0, 0xFF, 0x12, 0x19, 0x7A, 0x9B, 0x0F, 0x7D, 0x9D, 0x58, 0x98, // address
				0x15, 0x3E, 0x2F, 0xEA, 0xEC, 0xD9, 0xC0, 0x5D, 0xB8,
				0x00, 0x00, 0x00, // message header
				0x00 // attachments header
			)
		};

		const assertCanParseAndFormatBlock = (payload, payloadSize) => {
			// Arrange:
			payload.writeInt32LE(payloadSize, 0);

			// Sanity:
			expect(payload.length).to.equal(payloadSize);

			// Act:
			const block = modelFormatter.parseAndFormatBlock(payload);

			// Assert: only the block header is returned
			expect(block).to.deep.equal({
				size: payloadSize,
				signature: 'F5248CB00549C615FC561308E34B60FF3EE9FA15A3B605DC0C4CF7F1B15AABDC'
					+ 'CC2E09593897F269D9E256292BF352C0E834626D003CBFC2180D71ED25723F48',
				signer: '208DEC1A5DB855FB7C3EA2C511DD91A40A49EC65420342D298DF19D21CD1A894',
				version: 0xA8A4,
				type: 0xEA82,

				height: 0xE10E458797D7,
				timestamp: 0x18B463A306237,
				difficulty: 0x75028654600A,

				previousBlockHash: '5078E8A1E935E361D0812DF8C44951FB04913130663E14298178E3E024DF0DD0',
				blockTransactionsHash: '85496C45828A76ACD658D8E3FB456D0E2FD2C2DD97D846BA5C192DECC853780E'
			});
		};

		it('can parse and format with no transactions', () => {
			// Assert:
			assertCanParseAndFormatBlock(Buffer.concat([
				Buffer.alloc(4), // size
				buffers.blockHeader
			]), 192);
		});

		it('can parse and format with transactions', () => {
			// Assert:
			assertCanParseAndFormatBlock(Buffer.concat([
				Buffer.alloc(4), // size
				buffers.blockHeader,
				buffers.transaction
			]), 341);
		});
	});
});
