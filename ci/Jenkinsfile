pipeline {

  agent {
    node {
      label 'docker-t3a-small'
    }
  }

  // using the Timestamper plugin we can add timestamps to the console log
  options {
    timestamps()
  }

  environment {
    DOCKER_REGISTRY = '249767383774.dkr.ecr.ap-southeast-1.amazonaws.com'
    CREDENTIAL_ID = 'ecr:ap-southeast-1:jenkins-ecr'
    IMAGE = 'proximax-catapult-rest'
  }

 stages {
    stage('Build') {
      steps {
        echo 'Starting Docker Container'
        withDockerContainer(image: 'node:14-alpine3.14', args: '-u root') {
          echo 'Installing dependencies'
          sh 'apk add python3 python3-dev py3-pip alpine-sdk'

          echo 'Build Catapult SDK'
          sh '(cd catapult-sdk; yarn install; yarn run clean; yarn run build)'

          echo 'Building REST'
          sh '(cd rest; yarn install; yarn run build)'
        }
      }
      post {
        success {
          echo 'Build Success'
        }
      }
    }

    stage('Unit Test') {
      steps {
        echo 'Starting Docker Container'
        script {
          docker.image('mongo:4.4').withRun('-p 27017:27017') {
            docker.image('node:14-alpine3.14').inside('-u root --network=host') {
              echo 'Testing catapult-sdk'
              sh '(cd catapult-sdk; yarn run test)'

              echo 'Testing rest'
              sh '(cd rest; yarn run test)'
            }
          }
        }
      }
    }

    stage('Build and Publish Release Image') {
      when {
        tag "release-*"   // only run these stage in tag release-*
      }
      steps {
        echo 'Build and Publish Image'

        script {
            def newImage = docker.build("${IMAGE}")
            docker.withRegistry("https://${DOCKER_REGISTRY}", "${CREDENTIAL_ID}"){
                newImage.push("${env.GIT_BRANCH}") // if a tag commit, then env.GIT_BRANCH returns the tag name instead of a branch
            }
        }
      }
      post {
        success {
            slackSend channel: '#devops',
                color: 'good',
                message: "Release with Tag *${env.GIT_BRANCH}* build of *${currentBuild.fullDisplayName}* completed successfully :100:\nPushed Docker image ${DOCKER_REGISTRY}/${IMAGE}:${env.GIT_BRANCH}"
        }
      }
    }

    stage('Build and Publish Develop Image') {
      when {
        branch 'develop'  // only run this stage in the develop branch
      }
      steps {
        echo 'Build and Publish Image'

        script {
            def newImage = docker.build("${IMAGE}")
            docker.withRegistry("https://${DOCKER_REGISTRY}", "${CREDENTIAL_ID}"){
                newImage.push("develop-jenkins-build-${env.BUILD_NUMBER}") // also push using Jenkins build number
                newImage.push("develop") // update Docker image develop
            }
        }
      }
      post {
        success {
            slackSend channel: '#devops',
                color: 'good',
                message: "Branch *${env.GIT_BRANCH}* build of *${currentBuild.fullDisplayName}* completed successfully :100:\nPushed Docker images ${DOCKER_REGISTRY}/${IMAGE}:develop-jenkins-build-${env.BUILD_NUMBER} and ${DOCKER_REGISTRY}/${IMAGE}:develop"
        }
      }
    }
  }

  post {
    failure {
        slackSend channel: '#devops',
            color: 'bad',
            message: "Branch *${env.GIT_BRANCH}* of *${currentBuild.fullDisplayName}* FAILED :scream:"
    }
  }
}
